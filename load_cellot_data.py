#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Feb  8 18:47:21 2022
  
@author: theouscidda
"""

# pathlib
from pathlib import Path
from sqlite3 import NotSupportedError

# absl
from absl import flags

# typing
from typing import Any, Dict, Iterator, Sequence, Union

# cellot
from cellot.utils.loaders import load
from cellot.data.utils import cast_loader_to_iterator
from cellot.train.experiment import prepare
from cellot.utils.evaluate import load_data


AnnDataDataset = Any

# data_type: Union[Literal["4i"], Literal["scRNAseq"]]
# where: Union[Literal["data_space"], Literal["latent_space"]]


def get_argv(drug_name: str,
             data_type: str,
             where: str = "data_space") -> Sequence[str]:
    """
    Get the argv associated associated to the bash command provided in the scripts/submit file,
    to execute to load dataset associated to drug: ``drug_name``.
    Loaded data can lie in the data space or in the latent space learned by scgen model. 
    This is only for the scRNAseq data, which is high dimensional (dim = 1000).

    Args:
        drug_name: name of the drug associated to dataset.
        data_type: type of genomic data, should be in {4i, scRNAseq}.
        where: where the loaded data should lie, should be in {data_space, latent_space}; 
               latent_space only available for scRNAseq data.

    Returns:
       argv: argv associated to the bash command to execute, to load dataset associated to drug: ``drug_name``.
    """
    if data_type == "4i":
        assert where == 'data_space',\
            "No latent space for 4i data."
        return [
            './scripts/train.py',
            '--outdir', f'./results/4i/drug-{drug_name}/model-cellot',
            '--config', './configs/tasks/4i.yaml',
            '--config', './configs/models/cellot.yaml',
            '--config.data.target', drug_name
        ]

    elif data_type == "scRNAseq":

        argv = [
            './scripts/train.py',
            '--outdir', f'./results/scrna-sciplex3/drug-{drug_name}/model-cellot',
            '--config', './configs/tasks/sciplex3.yaml',
            '--config', './configs/models/cellot.yaml',
            '--config.data.target', f'{drug_name}',

        ]

        if where == 'data_space':
            pass
        if where == 'latent_space':
            argv += [
                '--config.data.ae_emb.path', f'./results/scrna-sciplex3/drug-{drug_name}/model-scgen'
            ]
        else:
            raise NotSupportedError(
                f"where: {where} not supported, it should be in " +
                "{data_space, latent_space}."
            )

    else:
        raise NotSupportedError(
            f"data_type: {data_type} not supported, it should be in " +
            "{4i, scRNAseq}."
        )


def load_iterator(drug_name: str,
                  data_type: str,
                  where: str = "data_space") -> Dict[str, Iterator]:
    """
    Load dict of the 4 iterators asociated to drug: ``drug_name``;
    - 2 training iterators: iterator.train.source, iterator.train.target,
    - 2 testing iterators: iterator.test.source, iterator.test.target.
    Loaded data generated by iterators can lie in the data space or in the latent space learned by scgen model. 
    This is only for the scRNAseq data, which is high dimensional (dim = 1000).

    Args:
        drug_name: name of the drug associated to dataset.
        data_type: type of genomic data, should be in {4i, scRNAseq}.
        where: where the loaded data should lie, should be in {data_space, latent_space}; 
               latent_space only available for scRNAseq data.

    Returns:
        iterator: dict of 4 iterators.
    """

    argv = get_argv(
        drug_name=drug_name,
        data_type=data_type,
        where=where
    )

    # flags
    try:
        flags.DEFINE_multi_string("config", "", "Path to config")
    except:
        pass  # if flags alreasy defined

    config, outdir = prepare(argv)
    cachedir = outdir / "cache"
    _, _, loader = load(config, restore=cachedir / "last.pt")
    iterator = cast_loader_to_iterator(loader, cycle_all=True)

    return iterator


def load_dataset(drug_name: str,
                 data_type: str,
                 where: str = "data_space") -> AnnDataDataset:
    """
    Load andata dataset associated to drug: ``drug_name``.
    Loaded data can lie in the data space or in the latent space learned by scgen model. 
    This is only for the scRNAseq data, which is high dimensional (dim = 1000).

    Args:
        drug_name: name of the drug associated to dataset.
        data_type: type of genomic data, should be in {4i, scRNAseq}.
        where: where the loaded data should lie, should be in {data_space, latent_space}; 
               latent_space only available for scRNAseq data.

    Returns:
        dataset: corresponding andata dataset.
    """

    argv = get_argv(
        drug_name=drug_name,
        data_type=data_type,
        where=where
    )

    try:
        flags.DEFINE_multi_string("config", "", "Path to config")
    except:
        pass  # if flags alreasy defined

    config, _ = prepare(argv)
    dataset, _ = load_data(
        config,
        split_on=["split", "transport"],
        return_as="dataset",
        include_model_kwargs=True
    )

    return dataset
